import { NextResponse } from 'next/server';
import { prisma } from '@/app/lib/prisma';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/app/lib/auth';

// GET - Obtener una compra por ID
export async function GET(request, { params }) {
  try {
    const session = await getServerSession(authOptions);
    
    if (!session) {
      return NextResponse.json({ error: 'No autorizado' }, { status: 401 });
    }
    
    const id = parseInt(params.id);
    if (isNaN(id)) {
      return NextResponse.json({ error: 'ID inválido' }, { status: 400 });
    }
    
    const compra = await prisma.compra.findUnique({
      where: { id_compra: id },
      include: {
        proveedor: true,
        usuario: true,
        compra_productos: {
          include: {
            producto: true
          }
        },
        factura_compra: true
      }
    });
    
    if (!compra) {
      return NextResponse.json({ error: 'Compra no encontrada' }, { status: 404 });
    }
    
    return NextResponse.json(compra);
  } catch (error) {
    console.error(`Error en GET /api/compras/${params.id}:`, error);
    return NextResponse.json({ error: 'Error al obtener la compra' }, { status: 500 });
  }
}

// PUT - Actualizar una compra
export async function PUT(request, { params }) {
  try {
    const session = await getServerSession(authOptions);
    
    if (!session) {
      return NextResponse.json({ error: 'No autorizado' }, { status: 401 });
    }
    
    const id = parseInt(params.id);
    if (isNaN(id)) {
      return NextResponse.json({ error: 'ID inválido' }, { status: 400 });
    }
    
    const data = await request.json();
    
    // Validaciones básicas
    if (!data.proveedor_id_proveedor) {
      return NextResponse.json({ error: 'El proveedor es requerido' }, { status: 400 });
    }
    
    // Obtener la compra actual para comparar cambios
    const compraActual = await prisma.compra.findUnique({
      where: { id_compra: id },
      include: {
        compra_productos: true
      }
    });
    
    if (!compraActual) {
      return NextResponse.json({ error: 'Compra no encontrada' }, { status: 404 });
    }
    
    // Iniciar transacción
    const result = await prisma.$transaction(async (tx) => {
      // 1. Actualizar la compra principal
      await tx.compra.update({
        where: { id_compra: id },
        data: {
          proveedor_id_proveedor: parseInt(data.proveedor_id_proveedor),
          total: parseFloat(data.total),
          estado: data.estado
        }
      });
      
      // Si la compra se anula, restar stock
      if (compraActual.estado !== 'ANULADA' && data.estado === 'ANULADA') {
        for (const detalle of compraActual.compra_productos) {
          await tx.producto.update({
            where: { id_producto: detalle.producto_id_producto },
            data: {
              stock: {
                decrement: parseFloat(detalle.cantidad)
              }
            }
          });
        }
      }
      
      // Si la compra estaba anulada y ahora no, restaurar stock
      if (compraActual.estado === 'ANULADA' && data.estado !== 'ANULADA') {
        for (const detalle of compraActual.compra_productos) {
          await tx.producto.update({
            where: { id_producto: detalle.producto_id_producto },
            data: {
              stock: {
                increment: parseFloat(detalle.cantidad)
              }
            }
          });
        }
      }

      // 2. Actualizar la factura si existe
      if (data.factura && compraActual.factura_compra) {
        await tx.facturaCompra.update({
          where: { id_factura: compraActual.factura_compra.id_factura },
          data: {
            subtotal: parseFloat(data.factura.subtotal || 0),
            impuestos: parseFloat(data.factura.impuestos || 0),
            total: parseFloat(data.factura.total || 0)
          }
        });
      }
      
      // 3. Obtener la compra actualizada
      return tx.compra.findUnique({
        where: { id_compra: id },
        include: {
          proveedor: true,
          usuario: true,
          compra_productos: {
            include: {
              producto: true
            }
          },
          factura_compra: true
        }
      });
    });
    
    return NextResponse.json(result);
  } catch (error) {
    console.error(`Error en PUT /api/compras/${params.id}:`, error);
    return NextResponse.json({ error: 'Error al actualizar la compra' }, { status: 500 });
  }
}

// DELETE - Anular una compra
export async function DELETE(request, { params }) {
  try {
    const session = await getServerSession(authOptions);
    
    if (!session) {
      return NextResponse.json({ error: 'No autorizado' }, { status: 401 });
    }
    
    const id = parseInt(params.id);
    if (isNaN(id)) {
      return NextResponse.json({ error: 'ID inválido' }, { status: 400 });
    }
    
    // Obtener la compra actual antes de anularla
    const compra = await prisma.compra.findUnique({
      where: { id_compra: id },
      include: {
        compra_productos: true
      }
    });
    
    if (!compra) {
      return NextResponse.json({ error: 'Compra no encontrada' }, { status: 404 });
    }
    
    if (compra.estado === 'ANULADA') {
      return NextResponse.json({ 
        message: 'La compra ya se encuentra anulada',
        compra 
      });
    }
    
    // Iniciar transacción
    const result = await prisma.$transaction(async (tx) => {
      // 1. Anular la compra
      await tx.compra.update({
        where: { id_compra: id },
        data: {
          estado: 'ANULADA'
        }
      });
      
      // 2. Restar el stock de los productos
      for (const detalle of compra.compra_productos) {
        await tx.producto.update({
          where: { id_producto: detalle.producto_id_producto },
          data: {
            stock: {
              decrement: parseFloat(detalle.cantidad)
            }
          }
        });
        
        // 3. Registrar movimiento de inventario
        await tx.movimientoInventario.create({
          data: {
            tipo_movimiento: 'SALIDA',
            fecha_movimiento: new Date(),
            cantidad: detalle.cantidad,
            producto_id_producto: detalle.producto_id_producto
          }
        });
      }
      
      // 4. Obtener la compra actualizada
      return tx.compra.findUnique({
        where: { id_compra: id },
        include: {
          proveedor: true,
          usuario: true,
          compra_productos: {
            include: {
              producto: true
            }
          },
          factura_compra: true
        }
      });
    });
    
    return NextResponse.json({
      message: 'Compra anulada con éxito',
      compra: result
    });
  } catch (error) {
    console.error(`Error en DELETE /api/compras/${params.id}:`, error);
    return NextResponse.json({ error: 'Error al anular la compra' }, { status: 500 });
  }
}
