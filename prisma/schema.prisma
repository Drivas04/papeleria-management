// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Modelo para la tabla de caja
model Caja {
  id_cierre_caja     Int       @id @default(autoincrement()) 
  fecha_apertura     DateTime? @db.DateTime
  fecha_cierre       DateTime? @db.DateTime
  monto_inicial      Decimal?  @db.Decimal(10, 2)
  monto_final        Decimal?  @db.Decimal(10, 2)
  total_ventas       Decimal?  @db.Decimal(10, 2)
  diferencia         Decimal?  @db.Decimal(10, 2)
  estado             String?   @db.VarChar(15) @default("abierta") // abierta, cerrada
  usuario_id_usuario Int      
  usuario            Usuario   @relation(fields: [usuario_id_usuario], references: [id_usuario])
  notas              String?   @db.VarChar(255)
  
  @@map("caja")
}

// Modelo para la tabla de categorías
model Categoria {
  id_categoria    Int       @id @default(autoincrement())
  nombre          String    @db.VarChar(30)
  productos       Producto[]

  @@map("categoria")
}

// Modelo para la tabla de clientes
model Cliente {
  id_cliente         Int       @id @default(autoincrement())
  cedula             String    @unique @db.VarChar(10)
  nombre             String?   @db.VarChar(30)
  apellido           String?   @db.VarChar(30)
  direccion          String?   @db.VarChar(100)
  email              String?   @db.VarChar(50)
  telefono           String?   @db.VarChar(15)
  total_compras      Int?      @default(0)
  ultima_compra      DateTime? @db.Date
  ventas             Venta[]

  @@map("cliente")
}

// Modelo para la tabla de compras
model Compra {
  id_compra              Int             @id @default(autoincrement())
  fecha_compra           DateTime?       @db.Date
  estado                 String?         @db.VarChar(20)
  total                  Decimal?        @db.Decimal(10, 2)
  usuario_id_usuario     Int
  proveedor_id_proveedor Int
  usuario                Usuario         @relation(fields: [usuario_id_usuario], references: [id_usuario])
  proveedor              Proveedor       @relation(fields: [proveedor_id_proveedor], references: [id_proveedor])
  compra_productos       CompraProducto[]
  factura_compra         FacturaCompra?

  @@map("compra")
}

// Modelo para la tabla de detalles de compra
model CompraProducto {
  compra_id_compra     Int
  producto_id_producto Int
  precio_unitario      Decimal @db.Decimal(10, 2)
  cantidad             Decimal @db.Decimal(10, 2)
  subtotal             Decimal @db.Decimal(10, 2)
  compra               Compra  @relation(fields: [compra_id_compra], references: [id_compra])
  producto             Producto @relation(fields: [producto_id_producto], references: [id_producto])

  @@id([compra_id_compra, producto_id_producto])
  @@map("compra_producto")
}

// Modelo para la tabla de facturas de compra
model FacturaCompra {
  id_factura       Int      @id @default(autoincrement())
  fecha            DateTime? @db.Date
  subtotal         Decimal? @db.Decimal(10, 2)
  impuestos        Decimal? @db.Decimal(10, 2)
  total            Decimal? @db.Decimal(10, 2)
  compra_id_compra Int      @unique
  compra           Compra   @relation(fields: [compra_id_compra], references: [id_compra])

  @@map("factura_compra")
}

// Modelo para la tabla de facturas de venta
model FacturaVenta {
  id_factura     Int      @id @default(autoincrement())
  fecha          DateTime? @db.Date
  subtotal       Decimal? @db.Decimal(10, 2)
  impuestos      Decimal? @db.Decimal(10, 2)
  total          Decimal? @db.Decimal(10, 2)
  venta_id_venta Int      @unique
  venta          Venta    @relation(fields: [venta_id_venta], references: [id_venta])

  @@map("factura_venta")
}

// Modelo para la tabla de movimientos de inventario
model MovimientoInventario {
  id_movimiento        Int       @id @default(autoincrement())
  tipo_movimiento      String?   @db.VarChar(15)
  fecha_movimiento     DateTime? @db.Date
  cantidad             Decimal?  @db.Decimal(10, 2)
  producto_id_producto Int
  producto             Producto  @relation(fields: [producto_id_producto], references: [id_producto])

  @@map("movimiento_inventario")
}

// Modelo para la tabla de productos
model Producto {
  id_producto            Int       @id @default(autoincrement())
  nombre_producto        String?   @db.VarChar(50)
  descripcion            String?   @db.VarChar(100)
  stock                  Decimal?  @db.Decimal(10, 2)
  precio_compra          Decimal?  @db.Decimal(10, 2) @default(0)
  precio_venta           Decimal?  @db.Decimal(10, 2) @default(0)
  stock_minimo           Decimal?  @db.Decimal(10, 2) @default(5)
  nivel_alerta           String?   @db.VarChar(15)
  categoria_id_categoria Int
  categoria              Categoria @relation(fields: [categoria_id_categoria], references: [id_categoria])
  compra_productos       CompraProducto[]
  venta_productos        VentaProducto[]
  movimientos            MovimientoInventario[]

  @@map("producto")
}

// Modelo para la tabla de proveedores
model Proveedor {
  id_proveedor    Int       @id @default(autoincrement())
  nombre          String?   @db.VarChar(30)
  telefono        String?   @db.VarChar(15)
  direccion       String?   @db.VarChar(50)
  contacto        String?   @db.VarChar(50)     // Nuevo campo: nombre de la persona de contacto
  email           String?   @db.VarChar(100)    // Nuevo campo: correo electrónico
  notas           String?   @db.VarChar(255)    // Nuevo campo: notas adicionales
  estado          String?   @db.VarChar(20) @default("activo") // Nuevo campo: estado (activo/inactivo)
  compras         Compra[]

  @@map("proveedor")
}

// Modelo para la tabla de usuarios
model Usuario {
  id_usuario  Int       @id @default(autoincrement())
  usuario     String?   @db.VarChar(20)
  contraseña  String?   @db.VarChar(20)
  rol         String?   @db.VarChar(10)
  ventas      Venta[]
  compras     Compra[]
  cajas       Caja[]

  @@map("usuario")
}

// Modelo para la tabla de ventas
model Venta {
  id_venta           Int             @id @default(autoincrement())
  tipo_venta         String?         @db.VarChar(20)
  estado             String?         @db.VarChar(20)
  cliente_id_cliente Int
  cliente_cedula     String          @db.VarChar(10)
  usuario_id_usuario Int
  cliente            Cliente         @relation(fields: [cliente_id_cliente], references: [id_cliente])
  usuario            Usuario         @relation(fields: [usuario_id_usuario], references: [id_usuario])
  venta_productos    VentaProducto[]
  factura_venta      FacturaVenta?

  @@map("venta")
}

// Modelo para la tabla de detalles de venta
model VentaProducto {
  venta_id_venta       Int
  producto_id_producto Int
  cantidad             Decimal @db.Decimal(10, 2)
  precio_unitario      Decimal @db.Decimal(10, 2)
  venta                Venta   @relation(fields: [venta_id_venta], references: [id_venta])
  producto             Producto @relation(fields: [producto_id_producto], references: [id_producto])

  @@id([venta_id_venta, producto_id_producto])
  @@map("venta_producto")
}
